diff --git a/qemu-0.10.0/Makefile.target b/qemu-0.10.0/Makefile.target
index f61de03..a14c007 100644
--- a/qemu-0.10.0/Makefile.target
+++ b/qemu-0.10.0/Makefile.target
@@ -579,7 +579,7 @@ OBJS += msmouse.o
 
 ifeq ($(TARGET_BASE_ARCH), i386)
 # Hardware support
-OBJS+= ide.o pckbd.o ps2.o vga.o $(SOUND_HW) dma.o
+OBJS+= ide.o cdaudio.o pckbd.o ps2.o vga.o $(SOUND_HW) dma.o
 OBJS+= fdc.o mc146818rtc.o serial.o i8259.o i8254.o pcspk.o pc.o
 OBJS+= cirrus_vga.o apic.o parallel.o acpi.o piix_pci.o
 OBJS+= usb-uhci.o vmmouse.o vmport.o vmware_vga.o s3_virge_vga.o hpet.o
@@ -589,7 +589,7 @@ endif
 ifeq ($(TARGET_BASE_ARCH), ppc)
 CPPFLAGS += -DHAS_AUDIO -DHAS_AUDIO_CHOICE
 # shared objects
-OBJS+= ppc.o ide.o vga.o $(SOUND_HW) dma.o openpic.o
+OBJS+= ppc.o ide.o cdaudio.o vga.o $(SOUND_HW) dma.o openpic.o
 # PREP target
 OBJS+= pckbd.o ps2.o serial.o i8259.o i8254.o fdc.o m48t59.o mc146818rtc.o
 OBJS+= prep_pci.o ppc_prep.o
@@ -616,7 +616,7 @@ ifeq ($(TARGET_BASE_ARCH), mips)
 OBJS+= mips_r4k.o mips_jazz.o mips_malta.o mips_mipssim.o
 OBJS+= mips_timer.o mips_int.o dma.o vga.o serial.o i8254.o i8259.o rc4030.o
 OBJS+= g364fb.o jazz_led.o
-OBJS+= ide.o gt64xxx.o pckbd.o ps2.o fdc.o mc146818rtc.o usb-uhci.o acpi.o ds1225y.o
+OBJS+= ide.o gt64xxx.o cdaudio.o pckbd.o ps2.o fdc.o mc146818rtc.o usb-uhci.o acpi.o ds1225y.o
 OBJS+= piix_pci.o parallel.o cirrus_vga.o s3_virge_vga.o pcspk.o $(SOUND_HW)
 OBJS+= mipsnet.o
 OBJS+= pflash_cfi01.o
@@ -639,7 +639,7 @@ OBJS+= pflash_cfi02.o nand.o
 endif
 ifeq ($(TARGET_BASE_ARCH), sparc)
 ifeq ($(TARGET_ARCH), sparc64)
-OBJS+= sun4u.o ide.o pckbd.o ps2.o vga.o apb_pci.o
+OBJS+= sun4u.o ide.o cdaudio.o pckbd.o ps2.o vga.o apb_pci.o
 OBJS+= fdc.o mc146818rtc.o serial.o m48t59.o
 OBJS+= cirrus_vga.o s3_virge_vga.o parallel.o ptimer.o
 else
@@ -659,7 +659,7 @@ OBJS+= arm-semi.o
 OBJS+= pxa2xx.o pxa2xx_pic.o pxa2xx_gpio.o pxa2xx_timer.o pxa2xx_dma.o
 OBJS+= pxa2xx_lcd.o pxa2xx_mmci.o pxa2xx_pcmcia.o pxa2xx_keypad.o
 OBJS+= pflash_cfi01.o gumstix.o
-OBJS+= zaurus.o ide.o serial.o nand.o ecc.o spitz.o tosa.o tc6393xb.o
+OBJS+= zaurus.o ide.o cdaudio.o serial.o nand.o ecc.o spitz.o tosa.o tc6393xb.o
 OBJS+= omap1.o omap_lcdc.o omap_dma.o omap_clk.o omap_mmc.o omap_i2c.o
 OBJS+= omap2.o omap_dss.o soc_dma.o
 OBJS+= omap_sx1.o palm.o tsc210x.o
@@ -672,7 +672,7 @@ endif
 ifeq ($(TARGET_BASE_ARCH), sh4)
 OBJS+= shix.o r2d.o sh7750.o sh7750_regnames.o tc58128.o
 OBJS+= sh_timer.o ptimer.o sh_serial.o sh_intc.o sh_pci.o sm501.o serial.o
-OBJS+= ide.o
+OBJS+= ide.o cdaudio.o
 endif
 ifeq ($(TARGET_BASE_ARCH), m68k)
 OBJS+= an5206.o mcf5206.o ptimer.o mcf_uart.o mcf_intc.o mcf5208.o mcf_fec.o
diff --git a/qemu-0.10.0/cuesheet.h b/qemu-0.10.0/cuesheet.h
new file mode 100644
index 0000000..d4d03a4
--- /dev/null
+++ b/qemu-0.10.0/cuesheet.h
@@ -0,0 +1,17 @@
+#ifndef CUESHEET_H
+#define CUESHEET_H
+
+typedef struct CueTrack {
+    int lba;
+    int is_audio;
+} CueTrack;
+
+typedef struct CueSheet {
+    char bin_path[1024];
+    int track_count;
+    CueTrack tracks[100];
+} CueSheet;
+
+extern CueSheet cue_sheet;
+
+#endif /* CUESHEET_H */
diff --git a/qemu-0.10.0/hw/cdaudio.c b/qemu-0.10.0/hw/cdaudio.c
new file mode 100644
index 0000000..672794e
--- /dev/null
+++ b/qemu-0.10.0/hw/cdaudio.c
@@ -0,0 +1,78 @@
+#include "hw.h"
+#include "cdaudio.h"
+#include "bswap.h"
+
+typedef struct CDAudioState {
+    QEMUSoundCard card;
+    SWVoiceOut *voice;
+    BlockDriverState *bs;
+    int playing;
+    int cur_lba;
+    int end_lba;
+} CDAudioState;
+
+static CDAudioState cd_audio;
+
+static void cdaudio_callback(void *opaque, int free)
+{
+    CDAudioState *s = opaque;
+    uint8_t sector[2352];
+
+    while (free >= 2352 && s->playing && s->cur_lba < s->end_lba) {
+        if (!s->bs)
+            break;
+        if (bdrv_pread(s->bs, (int64_t)s->cur_lba * 2352, sector, 2352) != 2352)
+            break;
+#ifndef WORDS_BIGENDIAN
+        for (int i = 0; i < 2352; i += 2)
+            *(uint16_t *)(sector + i) = bswap16(*(uint16_t *)(sector + i));
+#endif
+        int copied = AUD_write(s->voice, sector, 2352);
+        if (copied < 2352)
+            break;
+        free -= copied;
+        s->cur_lba++;
+        if (s->cur_lba >= s->end_lba)
+            s->playing = 0;
+    }
+    if (!s->playing)
+        AUD_set_active_out(s->voice, 0);
+}
+
+void cdaudio_init(BlockDriverState *bs)
+{
+    struct audsettings as = {44100, 2, AUD_FMT_S16, AUDIO_HOST_ENDIANNESS};
+    AudioState *audio = AUD_init();
+    cd_audio.bs = bs;
+    AUD_register_card(audio, "cdaudio", &cd_audio.card);
+    cd_audio.voice = AUD_open_out(&cd_audio.card, NULL, "cdaudio",
+                                  &cd_audio, cdaudio_callback, &as);
+}
+
+void cdaudio_set_bs(BlockDriverState *bs)
+{
+    cd_audio.bs = bs;
+}
+
+void cdaudio_play_lba(int start_lba, int nb_sectors)
+{
+    if (!cd_audio.voice)
+        cdaudio_init(cd_audio.bs);
+    cd_audio.cur_lba = start_lba;
+    cd_audio.end_lba = start_lba + nb_sectors;
+    cd_audio.playing = 1;
+    AUD_set_active_out(cd_audio.voice, 1);
+}
+
+void cdaudio_pause(int active)
+{
+    if (cd_audio.voice)
+        AUD_set_active_out(cd_audio.voice, active);
+}
+
+void cdaudio_stop(void)
+{
+    cd_audio.playing = 0;
+    if (cd_audio.voice)
+        AUD_set_active_out(cd_audio.voice, 0);
+}
diff --git a/qemu-0.10.0/hw/cdaudio.h b/qemu-0.10.0/hw/cdaudio.h
new file mode 100644
index 0000000..c145cab
--- /dev/null
+++ b/qemu-0.10.0/hw/cdaudio.h
@@ -0,0 +1,13 @@
+#ifndef CDAUDIO_H
+#define CDAUDIO_H
+
+#include "block.h"
+#include "audio/audio.h"
+
+void cdaudio_init(BlockDriverState *bs);
+void cdaudio_set_bs(BlockDriverState *bs);
+void cdaudio_play_lba(int start_lba, int nb_sectors);
+void cdaudio_pause(int active);
+void cdaudio_stop(void);
+
+#endif /* CDAUDIO_H */
diff --git a/qemu-0.10.0/hw/cdrom.c b/qemu-0.10.0/hw/cdrom.c
index 87427a5..94466f4 100644
--- a/qemu-0.10.0/hw/cdrom.c
+++ b/qemu-0.10.0/hw/cdrom.c
@@ -27,6 +27,7 @@
 
 #include "qemu-common.h"
 #include "scsi-disk.h"
+#include "cuesheet.h"
 
 static void lba_to_msf(uint8_t *buf, int lba)
 {
@@ -48,7 +49,25 @@ int cdrom_read_toc(int nb_sectors, uint8_t *buf, int msf, int start_track)
     q = buf + 2;
     *q++ = 1; /* first session */
     *q++ = 1; /* last session */
-    if (start_track <= 1) {
+    if (cue_sheet.track_count > 0) {
+        int i;
+        for (i = 0; i < cue_sheet.track_count; i++) {
+            if (start_track > (i + 1))
+                continue;
+            *q++ = 0;
+            *q++ = cue_sheet.tracks[i].is_audio ? 0x10 : 0x14;
+            *q++ = i + 1;
+            *q++ = 0;
+            if (msf) {
+                *q++ = 0;
+                lba_to_msf(q, cue_sheet.tracks[i].lba);
+                q += 3;
+            } else {
+                cpu_to_be32wu((uint32_t *)q, cue_sheet.tracks[i].lba);
+                q += 4;
+            }
+        }
+    } else if (start_track <= 1) {
         *q++ = 0; /* reserved */
         *q++ = 0x14; /* ADR, control */
         *q++ = 1;    /* track number */
@@ -58,7 +77,6 @@ int cdrom_read_toc(int nb_sectors, uint8_t *buf, int msf, int start_track)
             lba_to_msf(q, 0);
             q += 3;
         } else {
-            /* sector 0 */
             cpu_to_be32wu((uint32_t *)q, 0);
             q += 4;
         }
diff --git a/qemu-0.10.0/hw/ide.c b/qemu-0.10.0/hw/ide.c
index 6ad1d08..155c4d8 100644
--- a/qemu-0.10.0/hw/ide.c
+++ b/qemu-0.10.0/hw/ide.c
@@ -35,6 +35,8 @@
 #include "mac_dbdma.h"
 #include "sh.h"
 #include "dma.h"
+#include "cdaudio.h"
+#include "cuesheet.h"
 
 /* debug IDE devices */
 //#define DEBUG_IDE
@@ -1239,6 +1241,8 @@ static void lba_to_msf(uint8_t *buf, int lba)
     buf[2] = lba % 75;
 }
 
+static int msf_to_lba_local(int m,int s,int f) { return m*60*75 + s*75 + f - 150; }
+
 static void cd_data_to_raw(uint8_t *buf, int lba)
 {
     /* sync bytes */
@@ -1786,15 +1790,41 @@ static void ide_atapi_cmd(IDEState *s)
                 break;
             case 0xf8:
                 /* read all data */
-                ide_atapi_cmd_read(s, lba, nb_sectors, 2352);
-                break;
-            default:
-                ide_atapi_cmd_error(s, SENSE_ILLEGAL_REQUEST,
-                                    ASC_INV_FIELD_IN_CMD_PACKET);
-                break;
-            }
+            ide_atapi_cmd_read(s, lba, nb_sectors, 2352);
+            break;
+        default:
+            ide_atapi_cmd_error(s, SENSE_ILLEGAL_REQUEST,
+                                ASC_INV_FIELD_IN_CMD_PACKET);
+            break;
+        }
         }
         break;
+    case GPCMD_PLAY_AUDIO_10:
+        lba = ube32_to_cpu(packet + 2);
+        nb_sectors = ube16_to_cpu(packet + 7);
+        cdaudio_set_bs(s->bs);
+        cdaudio_play_lba(lba, nb_sectors);
+        ide_atapi_cmd_ok(s);
+        break;
+    case GPCMD_PLAY_AUDIO_MSF:
+        { int start_lba = msf_to_lba_local(packet[3], packet[4], packet[5]);
+          int end_lba = msf_to_lba_local(packet[6], packet[7], packet[8]);
+          cdaudio_set_bs(s->bs);
+          cdaudio_play_lba(start_lba, end_lba - start_lba); }
+        ide_atapi_cmd_ok(s);
+        break;
+    case GPCMD_PLAY_AUDIO_TI:
+    case GPCMD_PLAY_CD:
+        ide_atapi_cmd_ok(s);
+        break;
+    case GPCMD_PAUSE_RESUME:
+        if (packet[8] & 1) { cdaudio_pause(1); } else { cdaudio_pause(0); }
+        ide_atapi_cmd_ok(s);
+        break;
+    case GPCMD_STOP_PLAY_SCAN:
+        cdaudio_stop();
+        ide_atapi_cmd_ok(s);
+        break;
     case GPCMD_SEEK:
         {
             unsigned int lba;
@@ -2085,6 +2115,7 @@ static void ide_cfata_metadata_write(IDEState *s)
 static void cdrom_change_cb(void *opaque)
 {
     IDEState *s = opaque;
+    cdaudio_set_bs(s->bs);
     uint64_t nb_sectors;
 
     bdrv_get_geometry(s->bs, &nb_sectors);
diff --git a/qemu-0.10.0/qemu-doc.texi b/qemu-0.10.0/qemu-doc.texi
index 69e546e..ef7ec8b 100644
--- a/qemu-0.10.0/qemu-doc.texi
+++ b/qemu-0.10.0/qemu-doc.texi
@@ -253,8 +253,12 @@ Use @var{file} as hard disk 0, 1, 2 or 3 image (@pxref{disk_images}).
 
 @item -cdrom @var{file}
 Use @var{file} as CD-ROM image (you cannot use @option{-hdc} and
-@option{-cdrom} at the same time). You can use the host CD-ROM by
-using @file{/dev/cdrom} as filename (@pxref{host_drives}).
+@option{-cdrom} at the same time).  If @var{file} is a @file{.cue}
+description, QEMU will automatically open the referenced @file{.bin}
+image and emulate CD audio playback. Games using Red Book audio will
+play music just like from a real disc. You can use
+the host CD-ROM by using @file{/dev/cdrom} as filename
+(@pxref{host_drives}).
 
 @item -drive @var{option}[,@var{option}[,@var{option}[,...]]]
 
diff --git a/qemu-0.10.0/vl.c b/qemu-0.10.0/vl.c
index 356e0c0..9aa56f5 100644
--- a/qemu-0.10.0/vl.c
+++ b/qemu-0.10.0/vl.c
@@ -113,6 +113,7 @@
 #endif
 #endif
 
+#include <ctype.h>
 #include "qemu_socket.h"
 
 #if defined(CONFIG_SLIRP)
@@ -126,6 +127,7 @@
 #if defined(CONFIG_VDE)
 #include <libvdeplug.h>
 #endif
+#include "cuesheet.h"
 
 #ifdef _WIN32
 #include <malloc.h>
@@ -135,6 +137,82 @@
 #define memalign(align, size) malloc(size)
 #endif
 
+#define LINE_BUF_LEN 1024
+
+CueSheet cue_sheet;
+
+static int msf_to_lba(int m, int s, int f)
+{
+    return m * 60 * 75 + s * 75 + f - 150;
+}
+
+static int cue_extract_bin(const char *cuefile, char *out, int out_size)
+{
+    FILE *f = fopen(cuefile, "r");
+    char line[LINE_BUF_LEN];
+    char dir[1024];
+    const char *p;
+    int cur_is_audio = 0;
+
+    if (!f)
+        return -1;
+
+    memset(&cue_sheet, 0, sizeof(cue_sheet));
+
+    pstrcpy(dir, sizeof(dir), cuefile);
+    p = strrchr(dir, '/');
+#ifdef _WIN32
+    {
+        const char *p2 = strrchr(dir, '\\');
+        if (!p || p2 > p)
+            p = p2;
+    }
+#endif
+    if (p)
+        *(char *)(p + 1) = '\0';
+    else
+        dir[0] = '\0';
+
+    while (fgets(line, sizeof(line), f)) {
+        if (strstr(line, "FILE")) {
+            char *q = strchr(line, '"');
+            if (!q)
+                continue;
+            q++;
+            p = strchr(q, '"');
+            if (!p)
+                continue;
+            int len = p - q;
+            if (len > sizeof(cue_sheet.bin_path) - 1)
+                len = sizeof(cue_sheet.bin_path) - 1;
+            memcpy(cue_sheet.bin_path, q, len);
+            cue_sheet.bin_path[len] = '\0';
+            if (!path_is_absolute(cue_sheet.bin_path)) {
+                char tmp[1024];
+                path_combine(tmp, sizeof(tmp), dir, cue_sheet.bin_path);
+                pstrcpy(cue_sheet.bin_path, sizeof(cue_sheet.bin_path), tmp);
+            }
+        } else if (strstr(line, "TRACK")) {
+            cur_is_audio = strstr(line, "AUDIO") != NULL;
+        } else if (strstr(line, "INDEX 01")) {
+            int m, s, fframe;
+            if (sscanf(line, "%*s %*s %d:%d:%d", &m, &s, &fframe) == 3) {
+                if (cue_sheet.track_count < 100) {
+                    cue_sheet.tracks[cue_sheet.track_count].lba = msf_to_lba(m, s, fframe);
+                    cue_sheet.tracks[cue_sheet.track_count].is_audio = cur_is_audio;
+                    cue_sheet.track_count++;
+                }
+            }
+        }
+    }
+    fclose(f);
+
+    if (cue_sheet.track_count > 0) {
+        pstrcpy(out, out_size, cue_sheet.bin_path);
+        return 0;
+    }
+    return -1;
+}
 #ifdef CONFIG_SDL
 #ifdef __APPLE__
 #include <SDL/SDL.h>
@@
                 kernel_cmdline = optarg;
                 break;
             case QEMU_OPTION_cdrom:
-                drive_add(optarg, CDROM_ALIAS);
+                {
+                    char cuepath[1024];
+                    if (cue_extract_bin(optarg, cuepath, sizeof(cuepath)) == 0)
+                        drive_add(cuepath, CDROM_ALIAS);
+                    else
+                        drive_add(optarg, CDROM_ALIAS);
+                }
                 break;
             case QEMU_OPTION_boot:
                 boot_devices = optarg;
